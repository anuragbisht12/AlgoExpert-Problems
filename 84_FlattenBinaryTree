# This is the class of the input root. Do not edit it.
class BinaryTree:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

# O(N) time  and O(N) space
def flattenBinaryTree(root):
    inOrderNodes=getNodesInOrder(root,[])
	for i in range(len(inOrderNodes)-1):
		leftNode=inOrderNodes[i]
		rightNode=inOrderNodes[i+1]
		leftNode.right=rightNode
		rightNode.left=leftNode
	return inOrderNodes[0]

def getNodesInOrder(tree,array):
	if tree is not None:
		getNodesInOrder(tree.left,array)
		array.append(tree)
		getNodesInOrder(tree.right,array)
	return array
  
 #----------------------------------------------------------------------------------------------------------
# This is the class of the input root. Do not edit it.
class BinaryTree:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

# o(n) time and O(d) space
def flattenBinaryTree(root):
    leftMost,_=flattenTree(root)
	return leftMost

def flattenTree(node):
	if node.left is None:
		leftMost=node
	else:
		leftSubtreeLeftMost, leftSubtreeRightMost=flattenTree(node.left)
		connectNodes(leftSubtreeRightMost,node)
		leftMost=leftSubtreeLeftMost
	
	if  node.right is None:
		rightMost=node
	else:
		rightSubTreeLeftMost,rightSubtreeRightMost=flattenTree(node.right)
		connectNodes(node,rightSubTreeLeftMost)
		rightMost=rightSubtreeRightMost
		
	return [leftMost,rightMost]

def connectNodes(left,right):
	left.right=right
	right.left=left
